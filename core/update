#!/bin/bash

# Configura√ß√µes
INSTALL_DIR=$(dirname "$(realpath "$0")")
BACKUP_DIR="$HOME/autos-backup"
LOG_FILE="$INSTALL_DIR/update.log"

# Fun√ß√£o para logs
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Verifica se √© um reposit√≥rio
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    log "‚ùå Erro: N√£o √© um reposit√≥rio Git"
    exit 1
fi

# Modo de apenas verificar atualiza√ß√µes
if [ "$1" == "--check-only" ]; then
    git fetch origin >/dev/null 2>&1
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u})
    if [ "$LOCAL" != "$REMOTE" ]; then
        echo "[AUTOS] üîÑ Atualiza√ß√£o dispon√≠vel! Execute: autos system/update"
    fi
    exit 0
fi

# L√≥gica de atualiza√ß√£o completa
log "üîÑ Buscando atualiza√ß√µes..."
git fetch origin

LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u})
BASE=$(git merge-base @ @{u})

if [ "$LOCAL" = "$REMOTE" ]; then
    log "‚úÖ Voc√™ est√° na vers√£o mais recente."
    exit 0
elif [ "$LOCAL" = "$BASE" ]; then
    # Backup
    BACKUP_NAME="autos-$(date +%Y%m%d%H%M%S)"
    log "üíæ Backup: $BACKUP_DIR/$BACKUP_NAME"
    mkdir -p "$BACKUP_DIR"
    cp -r "$INSTALL_DIR" "$BACKUP_DIR/$BACKUP_NAME"
    
    # Atualiza√ß√£o
    log "‚¨áÔ∏è Baixando atualiza√ß√µes..."
    if git pull --rebase; then
        log "üîë Aplicando permiss√µes..."
        find "$INSTALL_DIR" -type f ! -path "*/.git/*" -exec chmod +x {} \;
        log "‚úÖ Atualiza√ß√£o conclu√≠da!"
    else
        log "‚ùå Falha na atualiza√ß√£o. Veja o log: $LOG_FILE"
        exit 1
    fi
else
    log "‚ö†Ô∏è  Conflitos detectados! Resolva manualmente:"
    log "1. Fa√ßa backup das suas altera√ß√µes"
    log "2. Execute: git status"
    log "3. Resolva os conflitos e depois:"
    log "   git add . && git rebase --continue"
    exit 1
fi