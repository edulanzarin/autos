#!/bin/bash

# ===========================
# build - Build Automatizado
# ===========================
# Detecta o tipo de projeto e executa o comando de build apropriado.
# Suporta: Node.js, Java/Gradle, Python, Go, Rust, .NET, Maven
# Uso:
#   build [--verbose|-v]
# ===========================

# Configura√ß√µes
VERBOSE=false
if [[ "$1" == "--verbose" || "$1" == "-v" ]]; then
    VERBOSE=true
fi

log() {
    if $VERBOSE; then
        echo "[DEBUG] $1"
    fi
}

echo "Analisando projeto..."

# Node.js (npm/yarn/pnpm)
if [ -f "package.json" ]; then
    echo "Projeto Node.js detectado"
    if grep -q '"build"' package.json; then
        # Verifica o gerenciador de pacotes
        if [ -f "yarn.lock" ]; then
            echo "Executando 'yarn build'"
            yarn build || { echo "‚ùå Falha no yarn build"; exit 1; }
        elif [ -f "pnpm-lock.yaml" ]; then
            echo "Executando 'pnpm build'"
            pnpm build || { echo "‚ùå Falha no pnpm build"; exit 1; }
        else
            echo "Executando 'npm run build'"
            npm run build || { echo "‚ùå Falha no npm run build"; exit 1; }
        fi
    else
        echo "Script 'build' n√£o encontrado no package.json"
        exit 0
    fi

# Java/Gradle
elif [ -f "build.gradle" ] || [ -f "build.gradle.kts" ]; then
    echo "Projeto Java/Gradle detectado"
    echo "Executando './gradlew build'"
    ./gradlew build || { echo "‚ùå Falha no gradle build"; exit 1; }

# Java/Maven
elif [ -f "pom.xml" ]; then
    echo "Projeto Java/Maven detectado"
    echo "Executando 'mvn package'"
    mvn package || { echo "‚ùå Falha no maven build"; exit 1; }

# Python (setup.py ou pyproject.toml)
elif [ -f "setup.py" ] || [ -f "pyproject.toml" ]; then
    echo "üêç Projeto Python detectado"
    if [ -f "setup.py" ]; then
        echo "Executando 'python setup.py build'"
        python setup.py build || { echo "‚ùå Falha no python build"; exit 1; }
    else
        echo "Executando 'pip install -e .'"
        pip install -e . || { echo "‚ùå Falha no pip install"; exit 1; }
    fi

# Go
elif [ -f "go.mod" ]; then
    echo "Projeto Go detectado"
    echo "Executando 'go build'"
    go build ./... || { echo "‚ùå Falha no go build"; exit 1; }

# Rust
elif [ -f "Cargo.toml" ]; then
    echo "Projeto Rust detectado"
    echo "Executando 'cargo build'"
    cargo build || { echo "‚ùå Falha no cargo build"; exit 1; }

# .NET
elif ls *.csproj 1> /dev/null 2>&1; then
    echo "Projeto .NET detectado"
    echo "Executando 'dotnet build'"
    dotnet build || { echo "‚ùå Falha no dotnet build"; exit 1; }

else
    echo "Tipo de projeto n√£o reconhecido ou n√£o suportado"
    echo "Projetos suportados:"
    echo "- Node.js (npm/yarn/pnpm)"
    echo "- Java/Gradle (build.gradle)"
    echo "- Java/Maven (pom.xml)"
    echo "- Python (setup.py/pyproject.toml)"
    echo "- Go (go.mod)"
    echo "- Rust (Cargo.toml)"
    echo "- .NET (*.csproj)"
    exit 1
fi

echo "Build conclu√≠do com sucesso"
exit 0