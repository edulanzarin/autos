#!/bin/bash

# ===========================
# Autos - Script de Atualiza√ß√£o
# ===========================
# Atualiza o reposit√≥rio Autos de forma segura, com backup autom√°tico,
# logs detalhados e verifica√ß√£o de conflitos.
# Pode ser executado manualmente ou chamado pelo sistema de verifica√ß√£o di√°ria.
#
# Autor: Edu Lanzarin
# Licen√ßa: MIT
# ===========================

# Diret√≥rio onde o Autos est√° instalado
INSTALL_DIR=$(dirname "$(realpath "$0")")

# Diret√≥rio para armazenar backups das vers√µes antigas
BACKUP_DIR="$HOME/autos-backup"

# Arquivo de log para registrar todas as opera√ß√µes de atualiza√ß√£o
LOG_FILE="$INSTALL_DIR/update.log"

# Fun√ß√£o utilit√°ria para registrar mensagens com timestamp no log e na tela
log() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Verifica se o diret√≥rio atual √© um reposit√≥rio Git v√°lido
if ! git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
    log "Erro: Este diret√≥rio n√£o √© um reposit√≥rio Git."
    exit 1
fi

# Modo de verifica√ß√£o r√°pida: apenas checa se h√° atualiza√ß√µes remotas
if [ "$1" == "--check-only" ]; then
    git fetch origin >/dev/null 2>&1
    LOCAL=$(git rev-parse @)
    REMOTE=$(git rev-parse @{u})
    if [ "$LOCAL" != "$REMOTE" ]; then
        echo "[AUTOS] Atualiza√ß√£o dispon√≠vel! Execute: autos system/update"
    fi
    exit 0
fi

# ===========================
# Processo de Atualiza√ß√£o Completa
# ===========================

log "Buscando atualiza√ß√µes remotas..."
git fetch origin

# Obt√©m os hashes dos commits local, remoto e base comum
LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u})
BASE=$(git merge-base @ @{u})

if [ "$LOCAL" = "$REMOTE" ]; then
    # Nenhuma atualiza√ß√£o dispon√≠vel
    log "Voc√™ j√° est√° usando a vers√£o mais recente do Autos."
    exit 0

elif [ "$LOCAL" = "$BASE" ]; then
    # Atualiza√ß√£o dispon√≠vel e sem conflitos locais
    BACKUP_NAME="autos-$(date +%Y%m%d%H%M%S)"
    log "üíæ Criando backup em: $BACKUP_DIR/$BACKUP_NAME"
    mkdir -p "$BACKUP_DIR"
    cp -r "$INSTALL_DIR" "$BACKUP_DIR/$BACKUP_NAME"
    
    log "‚¨áÔ∏è Aplicando atualiza√ß√µes do reposit√≥rio remoto..."
    if git pull --rebase; then
        # Garante que todos os scripts sejam execut√°veis, exceto arquivos do .git
        log "Ajustando permiss√µes dos scripts..."
        find "$INSTALL_DIR" -type f ! -path "*/.git/*" -exec chmod +x {} \;
        log "Atualiza√ß√£o conclu√≠da com sucesso!"
    else
        log "Falha ao aplicar atualiza√ß√µes. Consulte o log: $LOG_FILE"
        exit 1
    fi

else
    # Existem altera√ß√µes locais que conflitam com o remoto
    log "Conflitos detectados entre sua vers√£o local e o reposit√≥rio remoto!"
    log "1. Fa√ßa backup das suas altera√ß√µes importantes."
    log "2. Execute: git status para ver os arquivos em conflito."
    log "3. Resolva os conflitos e finalize com:"
    log "   git add . && git rebase --continue"
    exit 1