#!/bin/bash

# ===========================
# gpush - Commit e Push Inteligente
# ===========================
# Descrição: Faz commit seguro com verificação prévia e push para o remoto
# Uso: gpush "mensagem" [--dry-run|--verify]
# Opções:
#   --dry-run  Simula a operação sem efetivar mudanças
#   --verify   Executa verificações extras antes de prosseguir
# ===========================

# Cores ANSI
GREEN="\e[32m"
YELLOW="\e[33m"
RED="\e[31m"
BLUE="\e[34m"
BOLD="\e[1m"
RESET="\e[0m"
CHECK="${GREEN}✔${RESET}"
CROSS="${RED}✖${RESET}"
ARROW="${BLUE}➜${RESET}"

# Configurações
DRY_RUN=false
VERIFY=false
COMMIT_MSG=""

# Processa argumentos
while [[ $# -gt 0 ]]; do
    case "$1" in
        --dry-run)
            DRY_RUN=true
            shift
            ;;
        --verify)
            VERIFY=true
            shift
            ;;
        *)
            COMMIT_MSG="$1"
            shift
            ;;
    esac
done

# Validações iniciais
if [ -z "$COMMIT_MSG" ]; then
    echo -e "${CROSS} ${BOLD}Erro:${RESET} Mensagem de commit obrigatória"
    echo -e "Uso: ${BOLD}gpush \"mensagem\" [--dry-run|--verify]${RESET}"
    exit 1
fi

if ! git rev-parse --is-inside-work-tree &> /dev/null; then
    echo -e "${CROSS} ${BOLD}Erro:${RESET} Diretório não é um repositório Git"
    exit 1
fi

# Verificações extras (--verify)
verify_conditions() {
    echo -e "${ARROW} Verificações adicionais..."

    CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
    if [[ "$CURRENT_BRANCH" == "main" || "$CURRENT_BRANCH" == "master" ]]; then
        echo -e "${YELLOW}Você está na branch ${BOLD}$CURRENT_BRANCH${RESET}${YELLOW}.${RESET}"
        read -p "Deseja continuar? [y/N] " -n 1 -r
        echo
        [[ ! $REPLY =~ ^[Yy]$ ]] && echo -e "${CROSS} Operação cancelada" && exit 1
    fi

    if ! git fetch --dry-run 2>&1 | grep -q "up to date"; then
        echo -e "${YELLOW}Aviso:${RESET} Há alterações no remoto que ainda não foram sincronizadas"
        git status -uno
        read -p "Deseja continuar mesmo assim? [y/N] " -n 1 -r
        echo
        [[ ! $REPLY =~ ^[Yy]$ ]] && echo -e "${CROSS} Operação cancelada" && exit 1
    fi
}

# Execução principal
BRANCH=$(git rev-parse --abbrev-ref HEAD)
echo -e "${ARROW} Branch atual: ${BOLD}$BRANCH${RESET}"

if $VERIFY || $DRY_RUN; then
    verify_conditions
fi

# Simulação
if $DRY_RUN; then
    echo -e "${YELLOW}${BOLD}[Modo Simulação]${RESET} Nenhuma alteração será feita"
    echo -e "${ARROW} Comandos simulados:"
    echo -e "  • git add ."
    echo -e "  • git commit -m \"${COMMIT_MSG}\""
    echo -e "  • git push origin ${BRANCH}"
    exit 0
fi

# Processo real
echo -e "${ARROW} Adicionando arquivos..."
git add .

# Verifica se algo foi realmente adicionado
if git diff --cached --quiet; then
    echo -e "${YELLOW}Nenhuma alteração nova para commitar${RESET}"
    exit 0
fi

echo -e "${ARROW} Criando commit..."
git commit -m "$COMMIT_MSG" || {
    echo -e "${CROSS} Falha ao criar commit"
    exit 1
}

echo -e "${ARROW} Enviando para origin/${BRANCH}..."
git push origin "$BRANCH" || {
    echo -e "${CROSS} Falha no push. Execute manualmente: git push origin $BRANCH"
    exit 1
}

echo -e "${CHECK} Push concluído com sucesso!"
